ARG GEODESIC_IMAGE="cloudposse/geodesic"
ARG GEODESIC_VERSION="0.144.5"
ARG GEODESIC_OS="debian"
ARG OC_VERSION="4.7.10"
ARG ODO_VERSION="v2.2.0"
ARG KN_VERSION="0.20.0"
ARG TKN_VERSION="0.17.2"
ARG ROSA_VERSION="1.0.5"
ARG ATMOS_VERSION="0.18.0"

FROM $GEODESIC_IMAGE:$GEODESIC_VERSION-$GEODESIC_OS

ARG OC_VERSION="4.7.10" \
    ODO_VERSION="v2.2.0" \
    KN_VERSION="0.20.0" \
    TKN_VERSION="0.17.2" \
    ROSA_VERSION="1.0.5" \
    ATMOS_VERSION="0.18.0"

# CIP additional tools 
RUN apt-get update && \
    apt-get install -y apache2-utils && \
    sed -i -e 's|#!/dist/bin|#!/usr/local/bin|' /usr/local/bin/pip3 && \
    pip3 install aws-whoami awslogs awscli-cwlogs awscli-plugin-endpoint && \
    curl -sSLo oc_client.tar.gz https://mirror.openshift.com/pub/openshift-v4/clients/ocp/$OC_VERSION/openshift-client-linux-$OC_VERSION.tar.gz && \
    tar zxvf oc_client.tar.gz -C /usr/local/bin oc kubectl && \
    rm -f oc_client.tar.gz && \
    echo "oc client version: $(oc version --client)" && \
    echo "kubectl client version installed: $(/usr/local/bin/kubectl version --client)"  && \
    curl -sSLo odo_client.tar.gz https://mirror.openshift.com/pub/openshift-v4/clients/odo/$ODO_VERSION/odo-linux-amd64.tar.gz && \
    tar zxvf odo_client.tar.gz -C /usr/local/bin odo && \
    rm -f odo_client.tar.gz && \
    echo "odo client version: $(odo version)"  && \
    curl -sSLo kn_client.tar.gz https://mirror.openshift.com/pub/openshift-v4/clients/serverless/$KN_VERSION/kn-linux-amd64.tar.gz && \
    tar zxvf kn_client.tar.gz -C /usr/local/bin kn && \
    rm -f kn_client.tar.gz && \
    echo "kn client version: $(kn version)"  && \
    curl -sSLo tkn_client.tar.gz https://mirror.openshift.com/pub/openshift-v4/clients/pipeline/$TKN_VERSION/tkn-linux-amd64-${TKN_VERSION}.tar.gz  && \
    tar zxvf tkn_client.tar.gz -C /usr/local/bin tkn && \
    rm -f tkn_client.tar.gz && \
    echo "tkn client version: $(tkn version)"  && \
    curl -sSLo rosa_client.tar.gz https://mirror.openshift.com/pub/openshift-v4/clients/rosa/$ROSA_VERSION/rosa-linux.tar.gz  && \
    tar zxvf rosa_client.tar.gz -C /usr/local/bin rosa && \
    rm -f rosa_client.tar.gz && \
    echo "rosa client version: $(rosa version)"  && \
    curl -sSLo /usr/local/bin/atmos https://github.com/cloudposse/atmos/releases/download/$ATMOS_VERSION/atmos_${ATMOS_VERSION}_linux_amd64 && \
    chmod +x /usr/local/bin/atmos && \
    echo "atmos version: $(atmos version)"


# Banner is what is displayed at startup and on every command line
# in order to distinguish this image from other similar images
ENV BANNER "cip-geodesic"

ENV MOTD_URL=https://cip-core.github.io/motd/geodesic.txt

# Shell customization
# options for `less`. `R` allows ANSI color codes to be displayed while stripping out
# other control codes that can cause `less` to mess up the screen formatting
#ENV LESS=R

# Our older Geodesic configurations relied on `direnv`, which we no longer recommend,
# preferring YAML configuration files instead.
#ENV DIRENV_ENABLED=true
# Our older Geodesic configuration uses multiple Makefiles, like Makefile.tasks
# and depends on this setting, however this setting is set by default by `direnv`
# due to rootfs/conf/.envrc, but `direnv` is now disabled by default, too.
# If you are using (and therefore enable) `direnv`, consider the advantage
# of using `direnv` to set MAKE_INCLUDES, which is that it will only set
# it for trusted directories under `/conf` and therefore it will not affect
# `make` outside of this directory tree.
#ENV MAKE_INCLUDES="Makefile Makefile.*"

#
# Configure aws-okta to easily assume roles
#
#ENV AWS_OKTA_ENABLED=false

#
# Configure aws-vault to easily assume roles (not related to HashiCorp Vault)
#
ENV AWS_VAULT_ENABLED=true
ENV AWS_VAULT_SERVER_ENABLED=true
ENV AWS_VAULT_BACKEND=file
ENV AWS_VAULT_ASSUME_ROLE_TTL=1h
ENV AWS_VAULT_SESSION_TTL=12h
#ENV AWS_VAULT_FILE_PASSPHRASE=


#####################################################################################
## kops support
## If you are using Cloud Posse's kops reference architecture, you con configure it
## in your Dockerfile like this (edit as desired)
#
#ENV KOPS_CLUSTER_NAME=example.foo.bar
#
#ENV KOPS_MANIFEST=/conf/kops/manifest.yaml
#ENV KOPS_TEMPLATE=/templates/kops/default.yaml
#ENV KOPS_STATE_STORE s3://undefined
#ENV KOPS_STATE_STORE_REGION us-east-1
#ENV KOPS_FEATURE_FLAGS=+DrainAndValidateRollingUpdate
#
#ENV KOPS_BASTION_PUBLIC_NAME="bastion"
#
#ENV KUBECONFIG=/dev/shm/kubecfg
#ENV KUBECONFIG_TEMPLATE=/templates/kops/kubecfg.yaml
#
#RUN /usr/bin/kops completion bash > /etc/bash_completion.d/kops.sh
#
## Instance sizes for kops bastion, master nodes, and worker nodes
#ENV BASTION_MACHINE_TYPE "t3.small"
#ENV MASTER_MACHINE_TYPE "t3.medium"
#ENV NODE_MACHINE_TYPE "t3.medium"
#
## Min/Max number of nodes (aka workers) per region
#ENV NODE_MAX_SIZE 2
#ENV NODE_MIN_SIZE 2
#
## end of kops support section
#####################################################################################
